'use strict';
angular.module('timetedApp').directive('dateFormat', function(generalUtils) {
  return {
    restrict: 'E',
    scope: {
      timestamp: '=timestamp'
    },
    template: '{{formatDate(timestamp)}}',
    link: function(scope) {
      return scope.formatDate = function(timestamp) {
        return generalUtils.formatTimestamp(timestamp);
      };
    }
  };
});

angular.module('timetedApp').directive('dayFormat', function(generalUtils) {
  return {
    restrict: 'E',
    scope: {
      timestamp: '=timestamp'
    },
    template: '{{formatDate(timestamp)}}',
    link: function(scope) {
      return scope.formatDate = function(timestamp) {
        return generalUtils.formatTimestampToDate(timestamp);
      };
    }
  };
});

angular.module('timetedApp').directive('timeFormat', function(generalUtils) {
  return {
    restrict: 'E',
    scope: {
      timestamp: '=timestamp'
    },
    template: '{{formatDate(timestamp)}}',
    link: function(scope) {
      return scope.formatDate = function(timestamp) {
        return generalUtils.formatTimestampToTime(timestamp);
      };
    }
  };
});

angular.module('timetedApp').directive('msFormat', function(generalUtils) {
  return {
    restrict: 'E',
    scope: {
      ms: '=ms'
    },
    template: '{{format(ms)}}',
    link: function(scope) {
      return scope.format = function(ms) {
        return generalUtils.formatMs(ms);
      };
    }
  };
});


/*
  tt-required-text
 */

angular.module('timetedApp').directive('ttRequiredText', function() {
  return {
    restrict: 'AE',
    link: function(scope, elem, attrs, ctrl) {
      elem[0].oninvalid = function(e) {
        return e.target.setCustomValidity('Fyll i det här fältet ');
      };
      return elem[0].oninput = function(e) {
        return e.target.setCustomValidity('');
      };
    }
  };
});

angular.module('timetedApp').directive('formatUser', function(generalUtils) {
  return {
    restrict: 'E',
    scope: {
      user: '=user'
    },
    template: '{{formatUser(user)}}',
    link: function(scope) {
      return scope.formatUser = function(user) {
        return generalUtils.formatUser(user);
      };
    }
  };
});

angular.module('timetedApp').directive('managerRequired', function(roleService) {
  return {
    restrict: 'A',
    link: function(scope, element) {
      if (roleService.isManager()) {
        return element.show();
      } else {
        return element.hide();
      }
    }
  };
});

angular.module('timetedApp').directive('adminRequired', function(roleService) {
  return {
    restrict: 'A',
    link: function(scope, element) {
      if (roleService.isSystemManager()) {
        return element.show();
      } else {
        return element.hide();
      }
    }
  };
});

angular.module('timetedApp').directive('sysAdminRequired', function(roleService) {
  return {
    restrict: 'A',
    link: function(scope, element) {
      if (roleService.isSystemAdmin()) {
        return element.show();
      } else {
        return element.hide();
      }
    }
  };
});

//# sourceMappingURL=generalDirectives.js.map
